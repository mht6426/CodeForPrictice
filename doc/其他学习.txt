根据21日所了解的哈希实现方式去深入理解流量抓包控制

大致流程：
	大流量数据包 -> 程序 -> 解析数据包 -> 根据 原IP，目的IP，原端口号，目的端口号 对数据包以哈希存储的方式进行分配(可能引入多线程等方式对哈希存储优化) -> 获取相应数据  
	
Debian操作系统

learn:
	
命令行参数：
static const struct option -> 结构体
相关宏定义：
	#define no_argument		0   表示该参数后面不跟参数值
	#define required_argument	1  表示该参数后面一定要跟个参数值
	#define optional_argument	2  表示该参数后面可以跟，也可以不跟参数值
命令行传参一般分为两个选项，长选项(--),短选项(-)

getopt_long()函数：
	长短选项都可以传入

信号集函数
	sigset_t s;
	sigemptyset(sigset_t *set)初始化由set指定的信号集，信号集里面的所有信号被清空；
	sigfillset(sigset_t *set)调用该函数后，set指向的信号集中将包含linux支持的64种信号；
	sigaddset(sigset_t *set, int signum)在set指向的信号集中加入signum信号；
	sigdelset(sigset_t *set, int signum)在set指向的信号集中删除signum信号；
	sigismember(const sigset_t *set, int signum)判定信号signum是否在set指向的信号集中。

	相关宏定义：
	SIG_BLOCK：按照参数  set 提供的屏蔽字，屏蔽信号。并将原信号屏蔽保存到oldset中。
	SIG_UNBLOCK：按照参数  set 提供的屏蔽字进行信号的解除屏蔽。针对Set中的信号进行解屏。
	SIG_SETMASK:按照参数  set 提供的信号设置重新设置系统信号设置。

libcap库学习:
总体架构：
	1.首先要决定用哪一个接口进行嗅探开始。在Linux中，这可能是eth0，而在BSD系统中则可能是xl1等等。我们也可以用一个字符串来定义这个设备，或者采用pcap提供的接口名来工作。
	2.初始化pcap。在这里需要告诉pcap对什么设备进行嗅探。假如愿意的话，我们还可以嗅探多个设备。怎样区分它们呢？使用文件句柄。就像打开一个文件进行读写一样，必须命名我们的
		嗅探“会话”，以此使它们各自区别开来。
	3.如果只想嗅探特定的传输（如TCP/IP包，发往端口23的包等等），我们必须创建一个规则集合，编译并且使用它。这个过程分为三个相互紧密关联的阶段。
		规则集合被置于一个字符串内，并且被转换成能被pcap读的格式(因此编译它)。编译实际上就是在我们的程序里调用一个不被外部程序使用的函数。接下来我 们要告诉
		pcap使用它来过滤出我们想要的那一个会话。(此步骤可选)
	4.最后，我们告诉pcap进入它的主体执行循环。在这个阶段内pcap一直工作到它接收了所有我们想要的包为止。每当它收到一个包就调用另一个已经定义好的 
		函数，这个函数可以做我们想要的任何工作，它可以剖析所部获的包并给用户打印出结果，它可以将结果保存为一个文件，或者什么也不作。
	5.在嗅探到所需的数据后，我们要关闭会话并结束

	pcap_lookupdev()：函数用于查找网络设备，返回可被 pcap_open_live() 函数调用的网络设备名指针。
	pcap_lookupnet()：函数获得指定网络设备的网络号和掩码。
	pcap_open_live()： 函数用于打开网络设备，并且返回用于捕获网络数据包的数据包捕获描述字。对于此网络设备的操作都要基于此网络设备描述字。
	pcap_compile()： 函数用于将用户制定的过滤策略编译到过滤程序中。
	pcap_setfilter()：函数用于设置过滤器。
	pcap_loop()：函数 pcap_dispatch() 函数用于捕获数据包，捕获后还可以进行处理，此外 pcap_next() 和 pcap_next_ex() 两个函数也可以用来捕获数据包。
	pcap_close()：函数用于关闭网络设备，释放资源。
	pcap_next_ex()：从interface或离线记录文件获取一个报文

epoll：
	时间复杂度 -> O(1)
	使用了内核文件级别的回调机制O(1)
	/proc/sys/fs/epoll/max_user_watches -> 最大文件描述符限制

	epoll_create() -> 创建一个 epoll 实例 ，返回文件描述符
	epoll_ctl() -> 将监听的文件描述符添加到epoll实例中，实例代码
	为将标准输入文件描述符添加到epoll中
	epoll_wait: 等待epoll事件从epoll实例中发生， 并返回事件以及
	对应文件描述符l

	触发方式：
	水平触发：
		socket接收缓冲区不为空 有数据可读 读事件一直触发
		socket发送缓冲区不满 可以继续写入数据 写事件一直触发
	边沿触发：
		socket的接收缓冲区状态变化时触发读事件，即空的接收缓冲区刚接收到数据时触发读事件
		socket的发送缓冲区状态变化时触发写事件，即满的缓冲区刚空出空间时触发读事件

	注：边沿触发仅触发一次，水平触发会一直触发。

常见宏定义：
	EPOLL_CTL_ADD 添加节点
	EPOLL_CTL_DEL 删除节点
	EPOLL_CTL_MOD 修改节点监听事件
 
	EPOLLIN ： 表示对应的文件描述符可以读（包括对端SOCKET正常关闭）；
	EPOLLOUT： 表示对应的文件描述符可以写；
	EPOLLPRI： 表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）；
	EPOLLERR： 表示对应的文件描述符发生错误；
	EPOLLHUP： 表示对应的文件描述符被挂断；
	EPOLLET： 将 EPOLL设为边缘触发(Edge Triggered)模式（默认为水平触发），这是相对于水平触发(Level Triggered)来说的。
	EPOLLONESHOT： 只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里




demo流程：
	在sniffer结构体中定义一个list_head
				|
	在解析IP层包时筛选需要分片的数据包  -> 判断标志位的第二字节
				|
	创建一个包含list_head的结构体，该结构体用于识别分片数据包是否为同一个包及记录这个包的总长度 -> 记录src dst 及重组表示并根据上诉三项
	进行哈希排序及list_head节点的添加
				|
	创建一个包含list_head的结构体，该结构体用于识别同一数据包下的包长度及包的顺序	-> 根据同一分片数据包的偏移量进行排序，及对该数据结构下
	各节点的成员len进行求和及对比上层list_head所在结构体的成员len进行对比，若相同则代表包已完成组合	