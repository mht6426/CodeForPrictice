链路层帧数据：
	目的MAC地址(6) + 源MAC地址(6) + 类型(2) + 数据包(46 ~ 1500) + CRC(4) -> 最小帧大小 = 18 字节
网络层数据：
	IPV4数据：
		
		4字节： 版本(4) + 头长(4) + 服务类型(8) + 总长度(16)
		  +   
		4字节： 重组标识(16) + 标志(3) + 段偏移量(13)
		  + 
		4字节： 生存时间(8) + 协议代码(8) + 头校验和(16)
		  +  
		4字节： 源地址(32)
		  + 
		4字节： 目的地址(32)

		版本号：
			IPV4 = 0100 IPV6 = 0110
		头长：
			这个IP数据包有多少个字节数据，无选项则为 5(无可选项及用户数据)
		服务类型(tos)：
			过程字段：3位，设置了数据包的重要性，取值越大数据越重要，取值范围为：0（正常）~ 7（网络控制）
			延迟字段：1位，取值：0（正常）、1（期特低的延迟）
			流量字段：1位，取值：0（正常）、1（期特高的流量）
			可靠性字段：1位，取值：0（正常）、1（期特高的可靠性）
			成本字段：1位，取值：0（正常）、1（期特最小成本）
			保留字段：1位 ，未使用
			注：ftp这种需要最大吞吐,ssh和telnet需要最小延时
		总长度：
			当前IP数据包的总长度，单位是字节(最大为63Kb)

		重组标识：
			发送这发送的包的顺序，按序递增 1 
		标志：
			第一位：保留字段
			第二位：取值：0（允许数据报分段）、1（数据报不能分段）
			第三位：后面是否有更多分片，取值：0（数据包后面没有包，该包为最后的包）、1（数据包后面有更多的包）
		段偏移量：
			与更多段位组合，帮助接收方组合分段的报文
		生存时间：
			经常ping命令看到的TTL（Time To Live）就是这个，每经过一个路由器，该值就减一，到零丢弃。
		协议代码：
			表明使用该包裹的上层协议，如TCP=6，ICMP=1，UDP=17等
		头校验和：
			是IPv4数据包头部的校验和。
				发送方：计算一份数据报的IP头部检验和，则需要首先把此检验和字段置为0。然后对首部中每个16 bit（2字节）
					进行二进制反码求和(整个首部看成是由一串16 bit的字组成)，然后结果存在此检验和字段中。
				接受方：当收到一份IP数据报后，对首部中每个16 bit（2字节）进行二进制反码的求和。由于接收方在计算过程
					中包含了发送方存在首部中的检验和，因此，如果首部在传输过程中没有发生任何差错，那么接收方计算的结
					果应该为全1。如果结果不是全1(即检验和错误)，那么IP就丢弃收到的数据报。但是不生成差错报文,由上层去
					发现丢失的数据报并进行重传。
		原地址：点分十进制地址
		目的地址：同上

	IPV6数据：
		4字节：版本(4) + 流量分类(8) + 流标签(20) 
		  +
		4字节：有效载荷度(16) + 下一个头部(8) + 跳数限制(8)
		  +
		16字节：原IP地址
		  +
		16字节：目的IP地址

		版本号：
			IPV6 = 0110
		流量分类：
			用来标识对应的IPV6的流量类别，该字段长度为8比特位，类似于IPV4的TOS字段
		流标签：
			用来标记报文的数据流类型，以便在网络层区分不同的报文，字段长度为20比特
		有效载荷长度：
			

传输层数据：
	TCP数据:
		4字节： 源端口(16) + 目的端口(16)
		  +  
		4字节： 序号(32)
		  +  
		4字节： 确认号(32) 
		  +
		4字节： 首部字节(4) + 保留位(6) + 标志位(6) + 窗口(16)
		  +
		4字节： 校验和(16) + 紧急指针(16)

		源端口：
			报文发送端口，源端口和源IP地址组合起来，可以标识报文的发送地址。
		目的端口：
			目的端口号表示报文的接收端口，目的端口和目的IP地址相结合，可以标识报文的接收地址。
		序号：
			TCP传输过程中，在发送端出的字节流中，传输报文中的数据部分的每一个字节都有它的编号。
		确认号：
			TCP告诉接受者希望他下次接到数据包的第一个字节的序号。也同时代表自己确认接收到了这个序号-1字节的数据了。
		首部字节：
			表明数据距包头有多少个32位(有几个四个字节)。
		标志位：
			SYN：简写为S，同步标志位，用于建立会话连接，同步序列号；
			ACK： 简写为.，确认标志位，对已接收的数据包进行确认；
			FIN： 简写为F，完成标志位，表示我已经没有数据要发送了，即将关闭连接；
			PSH：简写为P，推送标志位，表示该数据包被对方接收后应立即交给上层应用，而不在缓冲区排队；
			RST：简写为R，重置标志位，用于连接复位、拒绝错误和非法的数据包；
			URG：简写为U，紧急标志位，表示数据包的紧急指针域有效，用来保证连接不被阻断，并督促中间设备尽快处理
		窗口：
			窗口字段用来控制对方发送的数据量，单位为字节。TCP连接的一端根据设置的缓存空间大小确定自己的接收窗口大小，然后通知对方以确定对方的发送窗口的上限。
		校验和：
			包校验和16位，包括首部和数据这两部分。在计算检验和时，要在TCP报文段的前面加上12字节的伪首部。校验范围包括TCP头、数据报内容和概念性伪头部。
		紧急指针：
			指向数据报中紧急数据最后一个字节的下一个字节。

		三次握手：
			第一次： 客户端发起 syn位置 1 发送自己的 seq windows大小 MSS大小
			第二次： 服务端接收后发出 syn置 1 ACK置 1 返回 服务端的seq + 1字节数据并发送自身的 seq  widows大小 MSS大小
			第三次： 客户端接到到服务端发送的seq并返回服务端的seq + 1 
